jobs:
  build-app:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
            
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS Cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the Eksctl Tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          zones: "us-east-1a,us-east-1b,us-east-1d"

  initialise-k8:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Update kubconfig
          command: |
            aws eks --region us-east-1 update-kubeconfig --name ziggy
            aws sts get-caller-identity
            cat ~/.kube/config
            kubectl get namespace
            sleep 20
            kubectl create namespace production-green
            kubectl create namespace production-blue
            sleep 2
            kubectl get namespace
            
  upload-docker:
    docker:
      - image: cimg/go:1.17
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run: |
          TAG=0.1.${CIRCLE_WORKFLOW_ID:0:2}
          docker build -t $DOCKER_PATH:$TAG
          docker push $DOCKER_PATH:$TAG
          
  deploy-app:
    docker:
      - image: cimg/go:1.17
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Update kubconfig
          command: |
            aws eks --region us-east-1 update-kubeconfig --name ziggy
            aws sts get-caller-identity
            cat ~/.kube/config
            kubectl get namespace
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Create K8 App on Blue and Green
          command: |
            TAG=0.1.${CIRCLE_WORKFLOW_ID:0:2}
            aws eks --region us-east-1 update-kubeconfig --name ziggy
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            dockerpath=$DOCKER_PATH:$TAG
            echo "Initialise Green deployment:"
            kubectl create deployment python-housek8s-production-green --image=$dockerpath -n=production-green
            kubectl expose deployment python-housek8s-production-green --type=LoadBalancer --port=8000 --target-port=80 -n=production-green
            echo "Initialise Blue deployment:"
            kubectl create deployment python-housek8s-production-blue --image=$dockerpath -n=production-blue
            kubectl expose deployment python-housek8s-production-blue --type=LoadBalancer --port=8000 --target-port=80 -n=production-blue
            sleep 15
            echo "App deployed to Blue and Green Namespaces"
            kubectl get services -o wide -n=production-green
            kubectl get services -o wide -n=production-blue
      - run:
          name: Output URLs
          command: |
            echo "BLUE LB"
            kubectl get services --namespace production-blue --output jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'
            echo "GREEN LB"
            kubectl get services --namespace production-green --output jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'
            
  helper-k8:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: helper kubconfig commands
          command: |
            aws eks --region us-east-1 update-kubeconfig --name ziggy
            echo "URL Green"
            kubectl get services --namespace production-green --output jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'
            kubectl get svc -n=production-blue -o wide
            kubectl get pods -n=production-blue -o wide
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
version: 2.1
workflows:
  deployment:
    jobs:
      - create-cluster:
          cluster-name: ziggy
      - initialise-k8:
          requires: [create-cluster]
      - build-app:
          requires: [initialise-k8]
      - upload-docker:
          requires: [build-app]
      - deploy-app:
          requires: [upload-docker]
          filters:
            branches:
              only:
                - main